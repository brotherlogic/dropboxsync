// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DropboxSyncServiceClient is the client API for DropboxSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropboxSyncServiceClient interface {
	AddSyncConfig(ctx context.Context, in *AddSyncConfigRequest, opts ...grpc.CallOption) (*AddSyncConfigResponse, error)
}

type dropboxSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDropboxSyncServiceClient(cc grpc.ClientConnInterface) DropboxSyncServiceClient {
	return &dropboxSyncServiceClient{cc}
}

func (c *dropboxSyncServiceClient) AddSyncConfig(ctx context.Context, in *AddSyncConfigRequest, opts ...grpc.CallOption) (*AddSyncConfigResponse, error) {
	out := new(AddSyncConfigResponse)
	err := c.cc.Invoke(ctx, "/dropboxsync.DropboxSyncService/AddSyncConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropboxSyncServiceServer is the server API for DropboxSyncService service.
// All implementations should embed UnimplementedDropboxSyncServiceServer
// for forward compatibility
type DropboxSyncServiceServer interface {
	AddSyncConfig(context.Context, *AddSyncConfigRequest) (*AddSyncConfigResponse, error)
}

// UnimplementedDropboxSyncServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDropboxSyncServiceServer struct {
}

func (UnimplementedDropboxSyncServiceServer) AddSyncConfig(context.Context, *AddSyncConfigRequest) (*AddSyncConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSyncConfig not implemented")
}

// UnsafeDropboxSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropboxSyncServiceServer will
// result in compilation errors.
type UnsafeDropboxSyncServiceServer interface {
	mustEmbedUnimplementedDropboxSyncServiceServer()
}

func RegisterDropboxSyncServiceServer(s grpc.ServiceRegistrar, srv DropboxSyncServiceServer) {
	s.RegisterService(&_DropboxSyncService_serviceDesc, srv)
}

func _DropboxSyncService_AddSyncConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSyncConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropboxSyncServiceServer).AddSyncConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dropboxsync.DropboxSyncService/AddSyncConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropboxSyncServiceServer).AddSyncConfig(ctx, req.(*AddSyncConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DropboxSyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dropboxsync.DropboxSyncService",
	HandlerType: (*DropboxSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSyncConfig",
			Handler:    _DropboxSyncService_AddSyncConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dropboxsync.proto",
}
